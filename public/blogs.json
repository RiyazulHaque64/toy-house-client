[
  {
    "id": 1,
    "question": "What is an access token and refresh token? How do they work and where should we store them on the client-side?",
    "answer": "Access Token: An access token is a string representing an authorization issued to the client. Tokens represent specific scopes and duration of access, granted by the resource owner, and enforced by the resource server and authorization server. Refresh Token: A refresh token is issued (along with access token) to the client by the authorization server. And we can store the access token and refresh token in the server-side session."
  },
  {
    "id": 2,
    "question": "Compare SQL and NoSQL databases?",
    "answer": "An SQL database—also known as a relational database—and named for the programming language it’s written in, Structured Query Language (SQL). It’s the more rigid, structured way of storing data. A relational database management system (RDBMS) executes queries, retrieves data, and edits data by updating, deleting, or creating new records. On the other hand, NoSQL databases--also known as “non SQL” or “not only SQL,” store data in a format other than relational tables."
  },
  {
    "id": 3,
    "question": "What is express js and What is Nest JS?",
    "answer": "Express JS: Express js is a free and open-source web application framework. It makes it easier to organize your application’s functionality with middleware and routing. It adds helpful utilities to Node.js HTTP objects and facilitates the rendering of dynamic HTTP objects. Next JS: NestJS is a open-source, back-end framework for Node.js and TypeScript-based, server-side applications. It is intended to provide a solid foundation for developing server-side applications by leveraging well-known patterns and the best practices from other frameworks."
  },
  {
    "id": 4,
    "question": "What is MongoDB aggregate and how does it work?",
    "answer": "Aggregation is the process of selecting data from a collection in MongoDB. It processes multiple documents and returns computed results. Aggregation operations can be work in two ways: 1. Using Aggregation Pipeline. 2. Using single purpose aggregation methods: db.collection.estimatedDocumentCount(), db.collection.count() and db.collection.distinct()."
  }
]
